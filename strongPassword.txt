using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

namespace strongPassword
{
    class Result
    {

        /*
         * Complete the 'minimumNumber' function below.
         *
         * The function is expected to return an INTEGER.
         * The function accepts following parameters:
         *  1. INTEGER n
         *  2. STRING password
         */

        public static int minimumNumber(int n, string password)
        {
            // Return the minimum number of characters to make the password strong
            var upperValidatorPattern = @"^.*(?=.*[A-Z])";
            Regex upperValidator = new Regex(upperValidatorPattern);

            var digitValidatorPattern = @"^.*(?=.*\d)";
            Regex digitValidator = new Regex(digitValidatorPattern);

            var lowerValidatorPattern = @"^.*(?=.*[a-z])";
            Regex lowerValidator = new Regex(lowerValidatorPattern);

            var specialValidatorPattern = @"^.*(?=.*[!@#$%^&*()-+])";
            Regex specialValidator = new Regex(specialValidatorPattern);

            int minSize = 6;

            int count = 0;

            if (upperValidator.IsMatch(password)!=true) count++;
            if (digitValidator.IsMatch(password)!= true) count++;
            if (lowerValidator.IsMatch(password)!= true) count++;
            if (specialValidator.IsMatch(password)!= true) count++;

            return Math.Max(minSize - n, count);

        }

    }

    class Solution
    {
        public static void Main(string[] args)
        {
            //TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);
            Console.WriteLine("The first line contains an integer, the length of the password");
            int n = Convert.ToInt32(Console.ReadLine().Trim());
            Console.WriteLine("The second line contains the password string. Each character is either a lowercase/uppercase English alphabet, a digit, or a special character.");
            string password = Console.ReadLine();
            int answer = Result.minimumNumber(n, password);
            Console.WriteLine(answer);
            Console.ReadLine();
        }
    }

}
